/*=auto=========================================================================

  Portions (c) Copyright 2005 Brigham and Women's Hospital (BWH) All Rights Reserved.

  See Doc/copyright/copyright.txt
  or http://www.slicer.org/copyright/copyright.txt for details.

  Program:   3D Slicer
  Module:    $RCSfile: vtkODFGlyph.cxx,v $
  Date:      $Date: 2006/01/06 17:57:26 $
  Version:   $Revision: 1.4 $

=========================================================================auto=*/
#include "vtkODFGlyph.h"

#include <vtkObjectFactory.h>
#include <vtkDoubleArray.h>
#include <vtkIdTypeArray.h>
#include <vtkCellArray.h>
#include <vtkPointData.h>
#include <vtkPoints.h>
#include <vtkPolyData.h>
#include <vtkImageData.h>
#include <vtkLookupTable.h>
#include <vtkTransform.h>

vtkStandardNewMacro(vtkODFGlyph);

const double vtkODFGlyph::SPHERE_POINTS[vtkODFGlyph::NUM_SPHERE_POINTS][3] = {
  {-0.99943, 0, -0.03386},
  {-0.9964, 0, 0.08482},
  {-0.99169, -0.1286, 0.00441},
  {-0.99169, 0.1286, 0.00441},
  {-0.98607, 0, -0.16631},
  {-0.98574, -0.12048, 0.11744},
  {-0.98574, 0.12048, 0.11744},
  {-0.98307, -0.13576, -0.12302},
  {-0.98307, 0.13576, -0.12302},
  {-0.98225, 0, 0.18759},
  {-0.96832, -0.2465, 0.04005},
  {-0.96832, 0.2465, 0.04005},
  {-0.96724, -0.08972, 0.23746},
  {-0.96724, 0.08972, 0.23746},
  {-0.96214, -0.26051, -0.08018},
  {-0.96214, 0.26051, -0.08018},
  {-0.96145, -0.22166, 0.16273},
  {-0.96145, 0.22166, 0.16273},
  {-0.95512, -0.14106, -0.26049},
  {-0.95512, 0.14106, -0.26049},
  {-0.95171, 0, -0.30699},
  {-0.9466, 0, 0.32242},
  {-0.93896, -0.27152, -0.21125},
  {-0.93896, 0.27152, -0.21125},
  {-0.93731, -0.19117, 0.29138},
  {-0.93731, 0.19117, 0.29138},
  {-0.93151, -0.35477, 0.08018},
  {-0.93151, 0.35477, 0.08018},
  {-0.92827, -0.36974, -0.04005},
  {-0.92827, 0.36974, -0.04005},
  {-0.91967, -0.09306, 0.38152},
  {-0.91967, 0.09306, 0.38152},
  {-0.91923, -0.33224, 0.21125},
  {-0.91923, 0.33224, 0.21125},
  {-0.90812, -0.3858, -0.16273},
  {-0.90812, 0.3858, -0.16273},
  {-0.90504, -0.14364, -0.40034},
  {-0.90504, 0.14364, -0.40034},
  {-0.89577, -0.27793, -0.34692},
  {-0.89577, 0.27793, -0.34692},
  {-0.89443, 0, -0.44721},
  {-0.88823, 0, 0.45941},
  {-0.88806, -0.30167, 0.34692},
  {-0.88806, 0.30167, 0.34692},
  {-0.87788, -0.47886, -0.00441},
  {-0.87788, 0.47886, -0.00441},
  {-0.87512, -0.468, 0.12302},
  {-0.87512, -0.19648, 0.44222},
  {-0.87512, 0.19648, 0.44222},
  {-0.87512, 0.468, 0.12302},
  {-0.87067, -0.39628, -0.29138},
  {-0.87067, 0.39628, -0.29138},
  {-0.8683, -0.48193, -0.11744},
  {-0.8683, 0.48193, -0.11744},
  {-0.85562, -0.44728, 0.26049},
  {-0.85562, 0.44728, 0.26049},
  {-0.84686, -0.09425, 0.52339},
  {-0.84686, 0.09425, 0.52339},
  {-0.83525, -0.49595, -0.23746},
  {-0.83525, 0.49595, -0.23746},
  {-0.83512, -0.22824, -0.50048},
  {-0.83512, 0.22824, -0.50048},
  {-0.82952, -0.08878, -0.55137},
  {-0.82952, 0.08878, -0.55137},
  {-0.82348, -0.35543, -0.44222},
  {-0.82348, 0.35543, -0.44222},
  {-0.81662, -0.41576, 0.40034},
  {-0.81662, 0.41576, 0.40034},
  {-0.80979, -0.30622, 0.50048},
  {-0.80979, 0.30622, 0.50048},
  {-0.80855, -0.58745, 0.03386},
  {-0.80855, 0.58745, 0.03386},
  {-0.80813, 0, 0.589},
  {-0.8061, -0.58567, -0.08482},
  {-0.8061, 0.58567, -0.08482},
  {-0.79872, -0.46528, -0.38152},
  {-0.79872, 0.46528, -0.38152},
  {-0.79775, -0.5796, 0.16631},
  {-0.79775, 0.5796, 0.16631},
  {-0.79465, -0.57735, -0.18759},
  {-0.79465, 0.57735, -0.18759},
  {-0.7869, -0.19648, 0.58497},
  {-0.7869, 0.19648, 0.58497},
  {-0.76995, -0.5594, 0.30699},
  {-0.76995, 0.5594, 0.30699},
  {-0.76581, -0.5564, -0.32242},
  {-0.76581, 0.5564, -0.32242},
  {-0.76096, 0, -0.6488},
  {-0.75253, -0.09306, 0.65195},
  {-0.75253, 0.09306, 0.65195},
  {-0.7521, -0.30357, -0.58497},
  {-0.7521, 0.30357, -0.58497},
  {-0.74965, -0.17177, -0.63915},
  {-0.74965, 0.17177, -0.63915},
  {-0.74053, -0.42152, -0.52339},
  {-0.74053, 0.42152, -0.52339},
  {-0.72978, -0.64112, -0.23746},
  {-0.72978, 0.64112, -0.23746},
  {-0.7267, -0.68694, -0.00441},
  {-0.7267, 0.68694, -0.00441},
  {-0.72667, -0.67688, -0.11744},
  {-0.72667, 0.67688, -0.11744},
  {-0.72361, -0.52573, 0.44721},
  {-0.72361, 0.52573, 0.44721},
  {-0.72328, -0.41576, 0.55137},
  {-0.72328, 0.41576, 0.55137},
  {-0.71859, -0.52209, -0.45941},
  {-0.71859, 0.52209, -0.45941},
  {-0.71552, -0.68767, 0.12302},
  {-0.71552, 0.68767, 0.12302},
  {-0.71171, 0, 0.70247},
  {-0.70745, -0.30167, 0.63915},
  {-0.70745, 0.30167, 0.63915},
  {-0.68979, -0.67553, 0.26049},
  {-0.68979, 0.67553, 0.26049},
  {-0.68933, -0.61585, -0.38152},
  {-0.68933, 0.61585, -0.38152},
  {-0.68073, -0.08391, -0.72772},
  {-0.68073, 0.08391, -0.72772},
  {-0.67979, -0.19117, 0.70805},
  {-0.67979, 0.19117, 0.70805},
  {-0.6635, -0.36704, -0.65195},
  {-0.6635, 0.36704, -0.65195},
  {-0.66233, -0.24491, -0.70805},
  {-0.66233, 0.24491, -0.70805},
  {-0.65379, -0.47501, -0.589},
  {-0.65379, 0.47501, -0.589},
  {-0.64776, -0.64818, 0.40034},
  {-0.64776, 0.64818, 0.40034},
  {-0.64754, -0.74445, -0.16273},
  {-0.64754, 0.74445, -0.16273},
  {-0.64594, -0.7056, -0.29138},
  {-0.64594, 0.7056, -0.29138},
  {-0.64496, -0.08972, 0.75893},
  {-0.64496, 0.08972, 0.75893},
  {-0.6385, -0.76858, -0.04005},
  {-0.6385, 0.76858, -0.04005},
  {-0.62973, -0.57403, -0.52339},
  {-0.62973, 0.57403, -0.52339},
  {-0.62526, -0.77629, 0.08018},
  {-0.62526, 0.77629, 0.08018},
  {-0.61892, -0.5594, 0.55137},
  {-0.61892, 0.5594, 0.55137},
  {-0.61563, -0.44728, 0.6488},
  {-0.61563, 0.44728, 0.6488},
  {-0.60706, 0, 0.79465},
  {-0.60357, 0, -0.79731},
  {-0.60004, -0.77158, 0.21125},
  {-0.60004, -0.33224, 0.72772},
  {-0.60004, 0.33224, 0.72772},
  {-0.60004, 0.77158, 0.21125},
  {-0.59589, -0.15896, -0.78717},
  {-0.59589, 0.15896, -0.78717},
  {-0.5925, -0.67334, -0.44222},
  {-0.5925, 0.67334, -0.44222},
  {-0.57579, -0.41833, -0.70247},
  {-0.57579, 0.41833, -0.70247},
  {-0.57552, -0.22166, 0.78717},
  {-0.57552, 0.22166, 0.78717},
  {-0.57452, -0.30651, -0.75893},
  {-0.57452, 0.30651, -0.75893},
  {-0.56133, -0.75137, 0.34692},
  {-0.56133, 0.75137, 0.34692},
  {-0.55411, -0.51761, -0.65195},
  {-0.55411, 0.51761, -0.65195},
  {-0.54839, -0.8091, -0.21125},
  {-0.54839, 0.8091, -0.21125},
  {-0.54588, -0.12048, 0.82915},
  {-0.54588, 0.12048, 0.82915},
  {-0.54508, -0.83454, -0.08018},
  {-0.54508, 0.83454, -0.08018},
  {-0.54147, -0.67553, 0.50048},
  {-0.54147, 0.67553, 0.50048},
  {-0.54114, -0.76604, -0.34692},
  {-0.54114, 0.76604, -0.34692},
  {-0.53366, -0.84475, 0.04005},
  {-0.53366, 0.84475, 0.04005},
  {-0.5242, -0.07617, -0.84818},
  {-0.5242, 0.07617, -0.84818},
  {-0.52147, 0, 0.85327},
  {-0.52113, -0.62148, -0.58497},
  {-0.52113, 0.62148, -0.58497},
  {-0.51245, -0.22339, -0.82915},
  {-0.51245, 0.22339, -0.82915},
  {-0.50791, -0.8459, 0.16273},
  {-0.50791, 0.8459, 0.16273},
  {-0.50552, -0.5796, 0.63915},
  {-0.50552, 0.5796, 0.63915},
  {-0.5014, -0.468, 0.72772},
  {-0.5014, 0.468, 0.72772},
  {-0.49112, -0.35682, -0.79465},
  {-0.49112, 0.35682, -0.79465},
  {-0.4883, -0.35477, 0.79731},
  {-0.4883, 0.35477, 0.79731},
  {-0.47514, -0.72372, -0.50048},
  {-0.47514, 0.72372, -0.50048},
  {-0.47146, -0.83236, 0.29138},
  {-0.47146, 0.83236, 0.29138},
  {-0.46905, -0.45168, -0.75893},
  {-0.46905, 0.45168, -0.75893},
  {-0.46886, -0.2465, 0.84818},
  {-0.46886, 0.2465, 0.84818},
  {-0.45729, -0.77158, 0.44222},
  {-0.45729, 0.77158, 0.44222},
  {-0.44744, -0.1286, 0.88502},
  {-0.44744, 0.1286, 0.88502},
  {-0.44321, 0, -0.89642},
  {-0.4376, -0.55423, -0.70805},
  {-0.4376, 0.55423, -0.70805},
  {-0.43758, -0.15896, -0.88502},
  {-0.43758, 0.15896, -0.88502},
  {-0.4329, -0.89301, -0.12302},
  {-0.4329, 0.89301, -0.12302},
  {-0.43003, -0.68767, 0.58497},
  {-0.43003, 0.68767, 0.58497},
  {-0.42931, -0.86478, -0.26049},
  {-0.42931, 0.86478, -0.26049},
  {-0.42875, -0.90341, 0.00441},
  {-0.42875, 0.90341, 0.00441},
  {-0.42188, -0.30651, -0.85327},
  {-0.42188, 0.30651, -0.85327},
  {-0.4192, -0.90027, 0.11744},
  {-0.4192, 0.90027, 0.11744},
  {-0.41667, 0, 0.90906},
  {-0.41628, -0.81636, -0.40034},
  {-0.41628, 0.81636, -0.40034},
  {-0.39502, -0.65988, -0.63915},
  {-0.39502, 0.65988, -0.63915},
  {-0.39188, -0.58745, 0.70805},
  {-0.39188, 0.58745, 0.70805},
  {-0.38865, -0.47886, 0.78717},
  {-0.38865, 0.47886, 0.78717},
  {-0.38422, -0.89218, 0.23746},
  {-0.38422, 0.89218, 0.23746},
  {-0.37932, -0.36974, 0.84818},
  {-0.37932, 0.36974, 0.84818},
  {-0.37269, -0.8459, 0.38152},
  {-0.37269, 0.8459, 0.38152},
  {-0.37081, -0.41833, -0.82915},
  {-0.37081, 0.41833, -0.82915},
  {-0.35857, -0.26051, 0.89642},
  {-0.35857, 0.26051, 0.89642},
  {-0.35134, -0.77629, 0.52339},
  {-0.35134, 0.77629, 0.52339},
  {-0.34646, -0.08391, -0.9343},
  {-0.34646, 0.08391, -0.9343},
  {-0.34077, -0.76149, -0.55137},
  {-0.34077, 0.76149, -0.55137},
  {-0.3371, -0.24491, -0.90906},
  {-0.3371, 0.24491, -0.90906},
  {-0.33532, -0.51761, -0.78717},
  {-0.33532, 0.51761, -0.78717},
  {-0.32961, -0.13576, 0.9343},
  {-0.32961, 0.13576, 0.9343},
  {-0.32105, -0.68694, 0.65195},
  {-0.32105, 0.68694, 0.65195},
  {-0.30884, -0.95051, -0.03386},
  {-0.30884, 0.95051, -0.03386},
  {-0.3079, -0.94763, 0.08482},
  {-0.3079, 0.94763, 0.08482},
  {-0.30471, -0.93781, -0.16631},
  {-0.30471, 0.93781, -0.16631},
  {-0.30353, -0.93417, 0.18759},
  {-0.30353, 0.93417, 0.18759},
  {-0.29409, -0.90513, -0.30699},
  {-0.29409, 0.90513, -0.30699},
  {-0.29251, -0.90027, 0.32242},
  {-0.29251, 0.90027, 0.32242},
  {-0.29223, 0, 0.95635},
  {-0.29016, -0.62148, -0.72772},
  {-0.29016, 0.62148, -0.72772},
  {-0.2864, -0.36704, -0.88502},
  {-0.2864, 0.36704, -0.88502},
  {-0.28463, -0.58567, 0.75893},
  {-0.28463, 0.58567, 0.75893},
  {-0.28327, -0.48193, 0.82915},
  {-0.28327, 0.48193, 0.82915},
  {-0.27639, -0.85065, -0.44721},
  {-0.27639, 0.85065, -0.44721},
  {-0.27448, -0.84475, 0.45941},
  {-0.27448, 0.84475, 0.45941},
  {-0.26057, -0.3858, 0.88502},
  {-0.26057, 0.3858, 0.88502},
  {-0.24973, -0.76858, 0.589},
  {-0.24973, 0.76858, 0.589},
  {-0.23999, 0, -0.97078},
  {-0.23642, -0.17177, -0.95635},
  {-0.23642, 0.17177, -0.95635},
  {-0.23515, -0.72372, -0.6488},
  {-0.23515, 0.72372, -0.6488},
  {-0.23443, -0.47501, -0.84818},
  {-0.23443, 0.47501, -0.84818},
  {-0.23097, -0.27152, 0.9343},
  {-0.23097, 0.27152, 0.9343},
  {-0.21993, -0.67688, 0.70247},
  {-0.21993, 0.67688, 0.70247},
  {-0.21357, -0.94763, 0.23746},
  {-0.21357, 0.94763, 0.23746},
  {-0.19569, -0.90341, 0.38152},
  {-0.19569, 0.90341, 0.38152},
  {-0.19416, -0.14106, 0.97078},
  {-0.19416, 0.14106, 0.97078},
  {-0.19003, -0.97473, 0.11744},
  {-0.19003, 0.97473, 0.11744},
  {-0.18759, -0.57735, 0.79465},
  {-0.18759, 0.57735, 0.79465},
  {-0.18686, -0.30357, -0.9343},
  {-0.18686, 0.30357, -0.9343},
  {-0.18651, -0.57403, -0.79731},
  {-0.18651, 0.57403, -0.79731},
  {-0.18414, -0.98289, 0.00441},
  {-0.18414, 0.98289, 0.00441},
  {-0.17467, -0.97691, -0.12302},
  {-0.17467, 0.97691, -0.12302},
  {-0.17205, -0.83454, 0.52339},
  {-0.17205, 0.83454, 0.52339},
  {-0.17191, -0.81636, -0.55137},
  {-0.17191, 0.81636, -0.55137},
  {-0.16114, -0.49595, 0.85327},
  {-0.16114, 0.49595, 0.85327},
  {-0.16099, -0.95196, -0.26049},
  {-0.16099, 0.95196, -0.26049},
  {-0.15103, 0, 0.98853},
  {-0.14404, -0.74445, 0.65195},
  {-0.14404, 0.74445, 0.65195},
  {-0.14306, -0.90513, -0.40034},
  {-0.14306, 0.90513, -0.40034},
  {-0.13696, -0.42152, -0.89642},
  {-0.13696, 0.42152, -0.89642},
  {-0.13056, -0.67334, -0.72772},
  {-0.13056, 0.67334, -0.72772},
  {-0.12876, -0.39628, 0.90906},
  {-0.12876, 0.39628, 0.90906},
  {-0.12219, -0.08878, -0.98853},
  {-0.12219, 0.08878, -0.98853},
  {-0.11398, -0.64112, 0.75893},
  {-0.11398, 0.64112, 0.75893},
  {-0.10783, -0.95051, 0.29138},
  {-0.10783, 0.95051, 0.29138},
  {-0.09031, -0.27793, 0.95635},
  {-0.09031, 0.27793, 0.95635},
  {-0.08954, -0.52209, -0.84818},
  {-0.08954, 0.52209, -0.84818},
  {-0.0863, -0.98289, 0.16273},
  {-0.0863, 0.98289, 0.16273},
  {-0.08357, -0.89301, 0.44222},
  {-0.08357, 0.89301, 0.44222},
  {-0.07416, -0.22824, -0.97078},
  {-0.07416, 0.22824, -0.97078},
  {-0.06829, -0.76604, -0.63915},
  {-0.06829, 0.76604, -0.63915},
  {-0.0648, -0.99709, 0.04005},
  {-0.0648, 0.99709, 0.04005},
  {-0.0563, -0.8091, 0.58497},
  {-0.0563, 0.8091, 0.58497},
  {-0.0541, -0.5564, 0.82915},
  {-0.0541, 0.5564, 0.82915},
  {-0.04955, -0.99555, -0.08018},
  {-0.04955, 0.99555, -0.08018},
  {-0.04667, -0.14364, 0.98853},
  {-0.04667, 0.14364, 0.98853},
  {-0.041, -0.86478, -0.50048},
  {-0.041, 0.86478, -0.50048},
  {-0.03296, -0.61585, -0.78717},
  {-0.03296, 0.61585, -0.78717},
  {-0.03192, -0.97691, -0.21125},
  {-0.03192, 0.97691, -0.21125},
  {-0.02826, -0.7056, 0.70805},
  {-0.02826, 0.7056, 0.70805},
  {-0.02726, -0.35543, -0.9343},
  {-0.02726, 0.35543, -0.9343},
  {-0.01596, -0.46528, 0.88502},
  {-0.01596, 0.46528, 0.88502},
  {-0.01248, -0.93781, -0.34692},
  {-0.01248, 0.93781, -0.34692},
  {0, 0, -1.},
  {0, 0, 1.},
  {0.01248, -0.93781, 0.34692},
  {0.01248, 0.93781, 0.34692},
  {0.01596, -0.46528, -0.88502},
  {0.01596, 0.46528, -0.88502},
  {0.02726, -0.35543, 0.9343},
  {0.02726, 0.35543, 0.9343},
  {0.02826, -0.7056, -0.70805},
  {0.02826, 0.7056, -0.70805},
  {0.03192, -0.97691, 0.21125},
  {0.03192, 0.97691, 0.21125},
  {0.03296, -0.61585, 0.78717},
  {0.03296, 0.61585, 0.78717},
  {0.041, -0.86478, 0.50048},
  {0.041, 0.86478, 0.50048},
  {0.04667, -0.14364, -0.98853},
  {0.04667, 0.14364, -0.98853},
  {0.04955, -0.99555, 0.08018},
  {0.04955, 0.99555, 0.08018},
  {0.0541, -0.5564, -0.82915},
  {0.0541, 0.5564, -0.82915},
  {0.0563, -0.8091, -0.58497},
  {0.0563, 0.8091, -0.58497},
  {0.0648, -0.99709, -0.04005},
  {0.0648, 0.99709, -0.04005},
  {0.06829, -0.76604, 0.63915},
  {0.06829, 0.76604, 0.63915},
  {0.07416, -0.22824, 0.97078},
  {0.07416, 0.22824, 0.97078},
  {0.08357, -0.89301, -0.44222},
  {0.08357, 0.89301, -0.44222},
  {0.0863, -0.98289, -0.16273},
  {0.0863, 0.98289, -0.16273},
  {0.08954, -0.52209, 0.84818},
  {0.08954, 0.52209, 0.84818},
  {0.09031, -0.27793, -0.95635},
  {0.09031, 0.27793, -0.95635},
  {0.10783, -0.95051, -0.29138},
  {0.10783, 0.95051, -0.29138},
  {0.11398, -0.64112, -0.75893},
  {0.11398, 0.64112, -0.75893},
  {0.12219, -0.08878, 0.98853},
  {0.12219, 0.08878, 0.98853},
  {0.12876, -0.39628, -0.90906},
  {0.12876, 0.39628, -0.90906},
  {0.13056, -0.67334, 0.72772},
  {0.13056, 0.67334, 0.72772},
  {0.13696, -0.42152, 0.89642},
  {0.13696, 0.42152, 0.89642},
  {0.14306, -0.90513, 0.40034},
  {0.14306, 0.90513, 0.40034},
  {0.14404, -0.74445, -0.65195},
  {0.14404, 0.74445, -0.65195},
  {0.15103, 0, -0.98853},
  {0.16099, -0.95196, 0.26049},
  {0.16099, 0.95196, 0.26049},
  {0.16114, -0.49595, -0.85327},
  {0.16114, 0.49595, -0.85327},
  {0.17191, -0.81636, 0.55137},
  {0.17191, 0.81636, 0.55137},
  {0.17205, -0.83454, -0.52339},
  {0.17205, 0.83454, -0.52339},
  {0.17467, -0.97691, 0.12302},
  {0.17467, 0.97691, 0.12302},
  {0.18414, -0.98289, -0.00441},
  {0.18414, 0.98289, -0.00441},
  {0.18651, -0.57403, 0.79731},
  {0.18651, 0.57403, 0.79731},
  {0.18686, -0.30357, 0.9343},
  {0.18686, 0.30357, 0.9343},
  {0.18759, -0.57735, -0.79465},
  {0.18759, 0.57735, -0.79465},
  {0.19003, -0.97473, -0.11744},
  {0.19003, 0.97473, -0.11744},
  {0.19416, -0.14106, -0.97078},
  {0.19416, 0.14106, -0.97078},
  {0.19569, -0.90341, -0.38152},
  {0.19569, 0.90341, -0.38152},
  {0.21357, -0.94763, -0.23746},
  {0.21357, 0.94763, -0.23746},
  {0.21993, -0.67688, -0.70247},
  {0.21993, 0.67688, -0.70247},
  {0.23097, -0.27152, -0.9343},
  {0.23097, 0.27152, -0.9343},
  {0.23443, -0.47501, 0.84818},
  {0.23443, 0.47501, 0.84818},
  {0.23515, -0.72372, 0.6488},
  {0.23515, 0.72372, 0.6488},
  {0.23642, -0.17177, 0.95635},
  {0.23642, 0.17177, 0.95635},
  {0.23999, 0, 0.97078},
  {0.24973, -0.76858, -0.589},
  {0.24973, 0.76858, -0.589},
  {0.26057, -0.3858, -0.88502},
  {0.26057, 0.3858, -0.88502},
  {0.27448, -0.84475, -0.45941},
  {0.27448, 0.84475, -0.45941},
  {0.27639, -0.85065, 0.44721},
  {0.27639, 0.85065, 0.44721},
  {0.28327, -0.48193, -0.82915},
  {0.28327, 0.48193, -0.82915},
  {0.28463, -0.58567, -0.75893},
  {0.28463, 0.58567, -0.75893},
  {0.2864, -0.36704, 0.88502},
  {0.2864, 0.36704, 0.88502},
  {0.29016, -0.62148, 0.72772},
  {0.29016, 0.62148, 0.72772},
  {0.29223, 0, -0.95635},
  {0.29251, -0.90027, -0.32242},
  {0.29251, 0.90027, -0.32242},
  {0.29409, -0.90513, 0.30699},
  {0.29409, 0.90513, 0.30699},
  {0.30353, -0.93417, -0.18759},
  {0.30353, 0.93417, -0.18759},
  {0.30471, -0.93781, 0.16631},
  {0.30471, 0.93781, 0.16631},
  {0.3079, -0.94763, -0.08482},
  {0.3079, 0.94763, -0.08482},
  {0.30884, -0.95051, 0.03386},
  {0.30884, 0.95051, 0.03386},
  {0.32105, -0.68694, -0.65195},
  {0.32105, 0.68694, -0.65195},
  {0.32961, -0.13576, -0.9343},
  {0.32961, 0.13576, -0.9343},
  {0.33532, -0.51761, 0.78717},
  {0.33532, 0.51761, 0.78717},
  {0.3371, -0.24491, 0.90906},
  {0.3371, 0.24491, 0.90906},
  {0.34077, -0.76149, 0.55137},
  {0.34077, 0.76149, 0.55137},
  {0.34646, -0.08391, 0.9343},
  {0.34646, 0.08391, 0.9343},
  {0.35134, -0.77629, -0.52339},
  {0.35134, 0.77629, -0.52339},
  {0.35857, -0.26051, -0.89642},
  {0.35857, 0.26051, -0.89642},
  {0.37081, -0.41833, 0.82915},
  {0.37081, 0.41833, 0.82915},
  {0.37269, -0.8459, -0.38152},
  {0.37269, 0.8459, -0.38152},
  {0.37932, -0.36974, -0.84818},
  {0.37932, 0.36974, -0.84818},
  {0.38422, -0.89218, -0.23746},
  {0.38422, 0.89218, -0.23746},
  {0.38865, -0.47886, -0.78717},
  {0.38865, 0.47886, -0.78717},
  {0.39188, -0.58745, -0.70805},
  {0.39188, 0.58745, -0.70805},
  {0.39502, -0.65988, 0.63915},
  {0.39502, 0.65988, 0.63915},
  {0.41628, -0.81636, 0.40034},
  {0.41628, 0.81636, 0.40034},
  {0.41667, 0, -0.90906},
  {0.4192, -0.90027, -0.11744},
  {0.4192, 0.90027, -0.11744},
  {0.42188, -0.30651, 0.85327},
  {0.42188, 0.30651, 0.85327},
  {0.42875, -0.90341, -0.00441},
  {0.42875, 0.90341, -0.00441},
  {0.42931, -0.86478, 0.26049},
  {0.42931, 0.86478, 0.26049},
  {0.43003, -0.68767, -0.58497},
  {0.43003, 0.68767, -0.58497},
  {0.4329, -0.89301, 0.12302},
  {0.4329, 0.89301, 0.12302},
  {0.43758, -0.15896, 0.88502},
  {0.43758, 0.15896, 0.88502},
  {0.4376, -0.55423, 0.70805},
  {0.4376, 0.55423, 0.70805},
  {0.44321, 0, 0.89642},
  {0.44744, -0.1286, -0.88502},
  {0.44744, 0.1286, -0.88502},
  {0.45729, -0.77158, -0.44222},
  {0.45729, 0.77158, -0.44222},
  {0.46886, -0.2465, -0.84818},
  {0.46886, 0.2465, -0.84818},
  {0.46905, -0.45168, 0.75893},
  {0.46905, 0.45168, 0.75893},
  {0.47146, -0.83236, -0.29138},
  {0.47146, 0.83236, -0.29138},
  {0.47514, -0.72372, 0.50048},
  {0.47514, 0.72372, 0.50048},
  {0.4883, -0.35477, -0.79731},
  {0.4883, 0.35477, -0.79731},
  {0.49112, -0.35682, 0.79465},
  {0.49112, 0.35682, 0.79465},
  {0.5014, -0.468, -0.72772},
  {0.5014, 0.468, -0.72772},
  {0.50552, -0.5796, -0.63915},
  {0.50552, 0.5796, -0.63915},
  {0.50791, -0.8459, -0.16273},
  {0.50791, 0.8459, -0.16273},
  {0.51245, -0.22339, 0.82915},
  {0.51245, 0.22339, 0.82915},
  {0.52113, -0.62148, 0.58497},
  {0.52113, 0.62148, 0.58497},
  {0.52147, 0, -0.85327},
  {0.5242, -0.07617, 0.84818},
  {0.5242, 0.07617, 0.84818},
  {0.53366, -0.84475, -0.04005},
  {0.53366, 0.84475, -0.04005},
  {0.54114, -0.76604, 0.34692},
  {0.54114, 0.76604, 0.34692},
  {0.54147, -0.67553, -0.50048},
  {0.54147, 0.67553, -0.50048},
  {0.54508, -0.83454, 0.08018},
  {0.54508, 0.83454, 0.08018},
  {0.54588, -0.12048, -0.82915},
  {0.54588, 0.12048, -0.82915},
  {0.54839, -0.8091, 0.21125},
  {0.54839, 0.8091, 0.21125},
  {0.55411, -0.51761, 0.65195},
  {0.55411, 0.51761, 0.65195},
  {0.56133, -0.75137, -0.34692},
  {0.56133, 0.75137, -0.34692},
  {0.57452, -0.30651, 0.75893},
  {0.57452, 0.30651, 0.75893},
  {0.57552, -0.22166, -0.78717},
  {0.57552, 0.22166, -0.78717},
  {0.57579, -0.41833, 0.70247},
  {0.57579, 0.41833, 0.70247},
  {0.5925, -0.67334, 0.44222},
  {0.5925, 0.67334, 0.44222},
  {0.59589, -0.15896, 0.78717},
  {0.59589, 0.15896, 0.78717},
  {0.60004, -0.77158, -0.21125},
  {0.60004, -0.33224, -0.72772},
  {0.60004, 0.33224, -0.72772},
  {0.60004, 0.77158, -0.21125},
  {0.60357, 0, 0.79731},
  {0.60706, 0, -0.79465},
  {0.61563, -0.44728, -0.6488},
  {0.61563, 0.44728, -0.6488},
  {0.61892, -0.5594, -0.55137},
  {0.61892, 0.5594, -0.55137},
  {0.62526, -0.77629, -0.08018},
  {0.62526, 0.77629, -0.08018},
  {0.62973, -0.57403, 0.52339},
  {0.62973, 0.57403, 0.52339},
  {0.6385, -0.76858, 0.04005},
  {0.6385, 0.76858, 0.04005},
  {0.64496, -0.08972, -0.75893},
  {0.64496, 0.08972, -0.75893},
  {0.64594, -0.7056, 0.29138},
  {0.64594, 0.7056, 0.29138},
  {0.64754, -0.74445, 0.16273},
  {0.64754, 0.74445, 0.16273},
  {0.64776, -0.64818, -0.40034},
  {0.64776, 0.64818, -0.40034},
  {0.65379, -0.47501, 0.589},
  {0.65379, 0.47501, 0.589},
  {0.66233, -0.24491, 0.70805},
  {0.66233, 0.24491, 0.70805},
  {0.6635, -0.36704, 0.65195},
  {0.6635, 0.36704, 0.65195},
  {0.67979, -0.19117, -0.70805},
  {0.67979, 0.19117, -0.70805},
  {0.68073, -0.08391, 0.72772},
  {0.68073, 0.08391, 0.72772},
  {0.68933, -0.61585, 0.38152},
  {0.68933, 0.61585, 0.38152},
  {0.68979, -0.67553, -0.26049},
  {0.68979, 0.67553, -0.26049},
  {0.70745, -0.30167, -0.63915},
  {0.70745, 0.30167, -0.63915},
  {0.71171, 0, -0.70247},
  {0.71552, -0.68767, -0.12302},
  {0.71552, 0.68767, -0.12302},
  {0.71859, -0.52209, 0.45941},
  {0.71859, 0.52209, 0.45941},
  {0.72328, -0.41576, -0.55137},
  {0.72328, 0.41576, -0.55137},
  {0.72361, -0.52573, -0.44721},
  {0.72361, 0.52573, -0.44721},
  {0.72667, -0.67688, 0.11744},
  {0.72667, 0.67688, 0.11744},
  {0.7267, -0.68694, 0.00441},
  {0.7267, 0.68694, 0.00441},
  {0.72978, -0.64112, 0.23746},
  {0.72978, 0.64112, 0.23746},
  {0.74053, -0.42152, 0.52339},
  {0.74053, 0.42152, 0.52339},
  {0.74965, -0.17177, 0.63915},
  {0.74965, 0.17177, 0.63915},
  {0.7521, -0.30357, 0.58497},
  {0.7521, 0.30357, 0.58497},
  {0.75253, -0.09306, -0.65195},
  {0.75253, 0.09306, -0.65195},
  {0.76096, 0, 0.6488},
  {0.76581, -0.5564, 0.32242},
  {0.76581, 0.5564, 0.32242},
  {0.76995, -0.5594, -0.30699},
  {0.76995, 0.5594, -0.30699},
  {0.7869, -0.19648, -0.58497},
  {0.7869, 0.19648, -0.58497},
  {0.79465, -0.57735, 0.18759},
  {0.79465, 0.57735, 0.18759},
  {0.79775, -0.5796, -0.16631},
  {0.79775, 0.5796, -0.16631},
  {0.79872, -0.46528, 0.38152},
  {0.79872, 0.46528, 0.38152},
  {0.8061, -0.58567, 0.08482},
  {0.8061, 0.58567, 0.08482},
  {0.80813, 0, -0.589},
  {0.80855, -0.58745, -0.03386},
  {0.80855, 0.58745, -0.03386},
  {0.80979, -0.30622, -0.50048},
  {0.80979, 0.30622, -0.50048},
  {0.81662, -0.41576, -0.40034},
  {0.81662, 0.41576, -0.40034},
  {0.82348, -0.35543, 0.44222},
  {0.82348, 0.35543, 0.44222},
  {0.82952, -0.08878, 0.55137},
  {0.82952, 0.08878, 0.55137},
  {0.83512, -0.22824, 0.50048},
  {0.83512, 0.22824, 0.50048},
  {0.83525, -0.49595, 0.23746},
  {0.83525, 0.49595, 0.23746},
  {0.84686, -0.09425, -0.52339},
  {0.84686, 0.09425, -0.52339},
  {0.85562, -0.44728, -0.26049},
  {0.85562, 0.44728, -0.26049},
  {0.8683, -0.48193, 0.11744},
  {0.8683, 0.48193, 0.11744},
  {0.87067, -0.39628, 0.29138},
  {0.87067, 0.39628, 0.29138},
  {0.87512, -0.468, -0.12302},
  {0.87512, -0.19648, -0.44222},
  {0.87512, 0.19648, -0.44222},
  {0.87512, 0.468, -0.12302},
  {0.87788, -0.47886, 0.00441},
  {0.87788, 0.47886, 0.00441},
  {0.88806, -0.30167, -0.34692},
  {0.88806, 0.30167, -0.34692},
  {0.88823, 0, -0.45941},
  {0.89443, 0, 0.44721},
  {0.89577, -0.27793, 0.34692},
  {0.89577, 0.27793, 0.34692},
  {0.90504, -0.14364, 0.40034},
  {0.90504, 0.14364, 0.40034},
  {0.90812, -0.3858, 0.16273},
  {0.90812, 0.3858, 0.16273},
  {0.91923, -0.33224, -0.21125},
  {0.91923, 0.33224, -0.21125},
  {0.91967, -0.09306, -0.38152},
  {0.91967, 0.09306, -0.38152},
  {0.92827, -0.36974, 0.04005},
  {0.92827, 0.36974, 0.04005},
  {0.93151, -0.35477, -0.08018},
  {0.93151, 0.35477, -0.08018},
  {0.93731, -0.19117, -0.29138},
  {0.93731, 0.19117, -0.29138},
  {0.93896, -0.27152, 0.21125},
  {0.93896, 0.27152, 0.21125},
  {0.9466, 0, -0.32242},
  {0.95171, 0, 0.30699},
  {0.95512, -0.14106, 0.26049},
  {0.95512, 0.14106, 0.26049},
  {0.96145, -0.22166, -0.16273},
  {0.96145, 0.22166, -0.16273},
  {0.96214, -0.26051, 0.08018},
  {0.96214, 0.26051, 0.08018},
  {0.96724, -0.08972, -0.23746},
  {0.96724, 0.08972, -0.23746},
  {0.96832, -0.2465, -0.04005},
  {0.96832, 0.2465, -0.04005},
  {0.98225, 0, -0.18759},
  {0.98307, -0.13576, 0.12302},
  {0.98307, 0.13576, 0.12302},
  {0.98574, -0.12048, -0.11744},
  {0.98574, 0.12048, -0.11744},
  {0.98607, 0, 0.16631},
  {0.99169, -0.1286, -0.00441},
  {0.99169, 0.1286, -0.00441},
  {0.9964, 0, -0.08482},
  {0.99943, 0, 0.03386}
};

// Construct object 
vtkODFGlyph::vtkODFGlyph() : ScaleFactor(3), BrightnessLevels(100) {

  this->VolumePositionMatrix = NULL;
  this->TensorRotationMatrix = NULL;
  this->WldToIjkMatrix = NULL;
  this->ImageExtract = NULL;
  this->ImageReformat = NULL;
  this->NumberOfInputComponents = 0;
  this->FieldOfView = 100;
  this->MinODF = 0;
  this->MaxODF = 1;
 
  int numTableValues = this->NUM_SPHERE_POINTS * this->BrightnessLevels;
  this->ColorTable = vtkLookupTable::New();
  this->ColorTable->SetNumberOfTableValues(numTableValues);
  this->ColorTable->SetTableRange(0, numTableValues - 1);

  for (int i = 0; i < this->BrightnessLevels; i++) {
    //adjust the brightness scale so that low values aren't too dark.
    //also need to ramp up mid or high vals
    double multiplier = (static_cast<double>(i) / static_cast<double>(this->BrightnessLevels)) * 0.5 + 0.5;
    for (int j = 0; j < this->NUM_SPHERE_POINTS; j++) {
      this->ColorTable->SetTableValue(i * this->NUM_SPHERE_POINTS + j, multiplier * fabs(this->SPHERE_POINTS[j][0]), multiplier * fabs(this->SPHERE_POINTS[j][1]), multiplier * fabs(this->SPHERE_POINTS[j][2]));
    }
  }
}

vtkODFGlyph::~vtkODFGlyph() {
  this->ColorTable->Delete();
}

void vtkODFGlyph::Execute() {
  vtkImageData *input = (vtkImageData *)(this->GetInput());
  vtkPolyData *output = this->GetOutput();

  int numInComponents = input->GetPointData()->GetScalars()->GetNumberOfComponents();
 
    if (this->ImageExtract== NULL || this->ImageReformat==NULL)
    {
    //Allocate New Data
       this->ImageExtract = new vtkImageExtractComponents *[numInComponents];
       this->ImageReformat = new vtkImageReformat *[numInComponents];
       this->NumberOfInputComponents = numInComponents;
       
       for (int i=0 ; i<this->NumberOfInputComponents ; i++)
         {
     this->ImageExtract[i] = vtkImageExtractComponents::New();
     this->ImageReformat[i] = vtkImageReformat::New();
     }
    }     
  else if (this->NumberOfInputComponents != numInComponents)
    {
       //Destroy and Deallocate previous Filters
       for (int i=0 ; i<this->NumberOfInputComponents ; i++)
          {
      this->ImageReformat[i]->Delete();
      this->ImageExtract[i]->Delete();
      }
      delete this->ImageReformat;
      delete this->ImageExtract;
       
       //Allocate New Data
       this->ImageExtract = new vtkImageExtractComponents *[numInComponents];
       this->ImageReformat = new vtkImageReformat *[numInComponents];
       this->NumberOfInputComponents = numInComponents;
       
       for (int i=0 ; i<this->NumberOfInputComponents ; i++)
         {
     this->ImageExtract[i] = vtkImageExtractComponents::New();
     this->ImageReformat[i] = vtkImageReformat::New();
     }
     
    }     
       

cerr <<"Reformat and Extract created"<<endl;
  
  //1. Extract component of HAR DATA
  //2. Reformat HAR Data
  //3. Scale plyph with HAR data
  int res;
  int *inExt = ((vtkImageData *) this->GetInput())->GetExtent();
  int resx = inExt[1] - inExt[0] + 1;
  int resy = inExt[3] - inExt[2] + 1;
  if (resx > resy) 
     res = resx;
  else
     res = resy;   
  for (int i = 0 ; i<this->NumberOfInputComponents ; i++) 
    {
     this->ImageExtract[i]->SetInput((vtkImageData *) this->GetInput());
     this->ImageExtract[i]->SetComponents(i);
     this->ImageReformat[i]->SetInput(this->ImageExtract[i]->GetOutput());
     this->ImageReformat[i]->SetFieldOfView(this->FieldOfView);
     this->ImageReformat[i]->SetInterpolate(0);
     this->ImageReformat[i]->SetWldToIjkMatrix(this->WldToIjkMatrix);
     this->ImageReformat[i]->SetReformatMatrix(this->VolumePositionMatrix);
     this->ImageReformat[i]->SetResolution(res);
     this->ImageReformat[i]->Update();
     //cout<<"Component num "<<i<<" Input Created"<<endl;
     //cout<<"Max Range: "<<this->ImageReformat[i]->GetOutput()->GetScalarRange()[1]<<endl;
    } 
 


  int *dim = this->ImageReformat[0]->GetOutput()->GetDimensions(); //change to rely on extent only
  int *extent = this->ImageReformat[0]->GetOutput()->GetExtent();
  vtkIdType newId = 0;

  vtkDoubleArray *pcoords = vtkDoubleArray::New();
  pcoords->SetNumberOfComponents(3);
  pcoords->SetNumberOfTuples(this->ODF_SIZE * dim[0] * dim[1] * dim[2]); //can't be larger than this
  //vtkPoints *pcoords = vtkPoints::New();
  //pcoords->Allocate(this->ODF_SIZE * dim[0] * dim[1] * dim[2]); //can't be larger than this


  vtkIdTypeArray *scalars = vtkIdTypeArray::New();
  scalars->SetNumberOfValues(this->ODF_SIZE * dim[0] * dim[1] * dim[2]); //can't be larger than this
  
  vtkCellArray *faces = vtkCellArray::New();

   
  vtkTransform *trans = vtkTransform::New(); 


  // figure out if we are transforming output point locations
  vtkTransform *userVolumeTransform = vtkTransform::New();
  if (this->VolumePositionMatrix)
    {
      userVolumeTransform->SetMatrix(this->VolumePositionMatrix);
      userVolumeTransform->PreMultiply();
    }

  trans->PreMultiply();

  //hope incrementing pointID each iteration is faster than calling input->ComputePointId every time.
  //will this work every time?
  vtkIdType pointID = -1; //is incremented to 0 in first iteration of loop
  float **inData;
  inData = new float*[this->NumberOfInputComponents];
  for (int z = 0; z < dim[2]; z++) {
    for (int y = 0; y < dim[1]; y++) {
      for (int x = 0; x < dim[0]; x++) {
    pointID++; // need to increment even if we don't produce a glyph for this voxel
    
    //Setting up transformation to locate the glyph in the right positi
    
    trans->Identity();
    double *voxelLocation;
    double voxelLocation2[3];
    voxelLocation=input->GetPoint(pointID);
      
        if (this->VolumePositionMatrix)
           {
             userVolumeTransform->TransformPoint(voxelLocation,voxelLocation2);
             voxelLocation = voxelLocation2;
           }
           trans->Translate(voxelLocation[0],voxelLocation[1],voxelLocation[2]); 
        if (this->TensorRotationMatrix)
          {
           trans->Concatenate(this->TensorRotationMatrix);
          }

        for (int i=0; i< this->NumberOfInputComponents;i++) {
      inData[i] = static_cast<float *>(this->ImageReformat[i]->GetOutput()->GetScalarPointer(x + extent[0], y + extent[2], z + extent[4]));
    }
    if (*inData[0] == 0) continue; //no odf val == 0 unless there is no glyph at this voxel


    vtkIdType pointIds[this->ODF_SIZE];
    for (int i = 0; i < this->ODF_SIZE; i++) {
      pointIds[i] = -1;
    }

    /*first this->ODF_SIZE components in inData are odf values. next 3*n components are
      n xyz triplets specifying qball connectivity*/

    //find min and max odf vals for normalization
    //probably should normalize w/ min/max from whole set of voxels -- still won't be whole volume
    double minODF = 1, maxODF = 0;
    for (int i = 0; i < this->ODF_SIZE; i++) {
      double currentODF = static_cast<double>(*inData[i]);
      if (currentODF < minODF) minODF = currentODF;
      if (currentODF > maxODF) maxODF = currentODF;
    }
    this->MinODF = minODF;
    this->MaxODF = maxODF;

    //for each face, where i = index of first face point
    for (int i = this->ODF_SIZE; i < input->GetNumberOfScalarComponents(); i+= 3) {
      vtkIdType faceIds[3], facePointId;

      //for each point in face, where j = index of point within the face
      for (int j = 0; j < 3; j++) {
        facePointId = static_cast<vtkIdType>(*inData[i + j]) - 1; //input pt ids from 1-based index

        /*-2 indicates beginning of padding (because there are less faces
          than the maximum possible)*/
        if (facePointId == -2) {
          newId -= j; //shouldn't ever break in middle of 3 points, but just in case, roll back id
          break;
        } else {
          /*if we haven't encountered this point id yet, remember it,
        corellate it w/ a new id, deform it based on odf information,
        and add its coords to an array*/
          if (pointIds[facePointId] == -1) {
        pointIds[facePointId] = newId;
        double pt[3];
        double pt2[3];
        double normalizedODF = (static_cast<double>(*inData[facePointId]) - minODF) / maxODF;
        double pointDisplacement = normalizedODF * this->ScaleFactor;
          
        for (int k = 0; k < 3; k++) {
          //deform sphere point w/ pointDisplacement, and translate to voxel location
          pt[k] = this->SPHERE_POINTS[facePointId][k] * pointDisplacement;
        }
        trans->TransformPoint(pt,pt2);
        pcoords->SetTuple(newId, pt2);

        //sphere point location determines color, normalized odf determines brightness
        scalars->SetValue(newId, static_cast<int>(normalizedODF * this->BrightnessLevels) * this->NUM_SPHERE_POINTS + facePointId);
        faceIds[j] = newId;
        newId++;
          } else { //use the id previously created for this point
        faceIds[j] = pointIds[facePointId];
          }
        } //if facePointId == -1
      } // for j = 0 to 2
      if (facePointId == -2) break;

      faces->InsertNextCell(3, faceIds);
    } // for i = first face pt id to last face pt id
            
      } // z
    } // y
  } // x

  pcoords->Resize(newId);
  scalars->Resize(newId);
  faces->Squeeze();

  vtkPoints *points = vtkPoints::New();
  points->SetData(pcoords);
  output->SetPoints(points);
  output->SetPolys(faces);
  output->GetPointData()->SetScalars(scalars);

  scalars->Delete();
  faces->Delete();
  points->Delete();
  pcoords->Delete();
  
  userVolumeTransform->Delete();
  trans->Delete();
  //Generate color table
}

//----------------------------------------------------------------------------
// Account for the MTime of objects we use
//
unsigned long int vtkODFGlyph::GetMTime()
{
  unsigned long mTime=this->vtkObject::GetMTime();
  unsigned long time;


  if ( this->VolumePositionMatrix != NULL )
    {
      time = this->VolumePositionMatrix->GetMTime();
      mTime = ( time > mTime ? time : mTime );
    }

  if ( this->TensorRotationMatrix != NULL )
    {
      time = this->TensorRotationMatrix->GetMTime();
      mTime = ( time > mTime ? time : mTime );
    }
  if ( this->WldToIjkMatrix != NULL )
    {
      time = this->WldToIjkMatrix->GetMTime();
      mTime = ( time > mTime ? time : mTime );
    }  
    

  return mTime;
}
