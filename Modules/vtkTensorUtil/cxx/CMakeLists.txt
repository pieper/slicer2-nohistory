#
# Source files: DO NOT EDIT THIS FILE: edit CMakeListsLocal.txt instead.
#
#

SET (LOCAL_LIBRARY_BASENAME vtkTensorUtil)

INCLUDE (${VTKTENSORUTIL_SOURCE_DIR}/cxx/CMakeListsLocal.txt)

# --------------------------------------------------------------------------
# You probably do not need to modify anything below this line

#
# Create the vtkTensorUtil C++ library
#
# (Doesn't work here because of a CMake bug)
# ADD_LIBRARY (vtkTensorUtil ${LOCAL_MODULE_SRCS})

#
# Create the vtkTensorUtil Tcl library
#

IF (VTK_WRAP_TCL AND VTKTENSORUTIL_WRAP_TCL)

  VTK_WRAP_TCL (vtkTensorUtilTCL TensorUtilTCL_SRCS ${LOCAL_MODULE_SRCS})
  ADD_LIBRARY (vtkTensorUtilTCL ${TensorUtilTCL_SRCS})
  TARGET_LINK_LIBRARIES (vtkTensorUtilTCL 
                         vtkTensorUtil
                         vtkIOTCL 
                         vtkGraphicsTCL 
                         vtkImagingTCL 
                         vtkFilteringTCL 
                         vtkCommonTCL
                         ${TCL_LIBRARY})
  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkTensorUtilTCL vtkHybridTCL)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkTensorUtilTCL vtkParallelTCL)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkTensorUtilTCL vtkPatentedTCL)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkTensorUtilTCL vtkRenderingTCL)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_TCL AND VTKTENSORUTIL_WRAP_TCL)

#
# Create the vtkTensorUtil Python library
#

IF (VTK_WRAP_PYTHON AND VTKTENSORUTIL_WRAP_PYTHON)

  VTK_WRAP_PYTHON (vtkTensorUtilPython TensorUtilPython_SRCS ${LOCAL_MODULE_SRCS})

  IF (APPLE)
    ADD_LIBRARY (vtkTensorUtilPython MODULE ${TensorUtilPython_SRCS})
  ELSE (APPLE)
    ADD_LIBRARY (vtkTensorUtilPython SHARED ${TensorUtilPython_SRCS})
  ENDIF (APPLE)

  IF (WIN32)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython 
                           vtkTensorUtil
                           vtkIOPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython
                           debug ${PYTHON_DEBUG_LIBRARY} 
                           optimized ${PYTHON_LIBRARY})
  ELSE (WIN32)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython 
                           vtkTensorUtilPython 
                           vtkIOPython
                           vtkGraphicsPython
                           vtkImagingPython
                           vtkFilteringPython
                           vtkCommonPython
                           ${PYTHON_LIBRARY})
  ENDIF (WIN32)

  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython vtkHybridPython)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython vtkParallelPython)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython vtkPatentedPython)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkTensorUtilPython vtkRenderingPython)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_PYTHON AND VTKTENSORUTIL_WRAP_PYTHON)

#
# Create the vtkTensorUtil Java library
#

IF (VTK_WRAP_JAVA AND VTKTENSORUTIL_WRAP_JAVA)

  VTK_WRAP_JAVA (vtkTensorUtilJava TensorUtilJava_SRCS ${LOCAL_MODULE_SRCS})
  ADD_LIBRARY (vtkTensorUtilJava SHARED ${TensorUtilJava_SRCS})
  TARGET_LINK_LIBRARIES (vtkTensorUtilJava 
                         vtkTensorUtil
                         vtkIOJava
                         vtkGraphicsJava
                         vtkImagingJava 
                         vtkFilteringJava
                         vtkCommonJava)
  IF (VTK_USE_HYBRID)
    TARGET_LINK_LIBRARIES (vtkTensorUtilJava vtkHybridJava)
  ENDIF (VTK_USE_HYBRID)

  IF (VTK_USE_PARALLEL)
    TARGET_LINK_LIBRARIES (vtkTensorUtilJava vtkParallelJava)
  ENDIF (VTK_USE_PARALLEL)

  IF (VTK_USE_PATENTED)
    TARGET_LINK_LIBRARIES (vtkTensorUtilJava vtkPatentedJava)
  ENDIF (VTK_USE_PATENTED)

  IF (VTK_USE_RENDERING)
    TARGET_LINK_LIBRARIES (vtkTensorUtilJava vtkRenderingJava)
  ENDIF (VTK_USE_RENDERING)

ENDIF (VTK_WRAP_JAVA AND VTKTENSORUTIL_WRAP_JAVA)

#
# Link to VTK and local
#

TARGET_LINK_LIBRARIES (
  vtkTensorUtil
  vtkIO
  vtkGraphics
  vtkImaging 
  vtkFiltering
  vtkCommon
  nrrd
  vtkzlib
)

IF (VTK_USE_HYBRID)
  TARGET_LINK_LIBRARIES (vtkTensorUtil vtkHybrid)
ENDIF (VTK_USE_HYBRID)

IF (VTK_USE_PARALLEL)
  TARGET_LINK_LIBRARIES (vtkTensorUtil vtkParallel)
ENDIF (VTK_USE_PARALLEL)

IF (VTK_USE_PATENTED)
  TARGET_LINK_LIBRARIES (vtkTensorUtil vtkPatented)
ENDIF (VTK_USE_PATENTED)

IF (VTK_USE_RENDERING)
  TARGET_LINK_LIBRARIES (vtkTensorUtil vtkRendering)
ENDIF (VTK_USE_RENDERING)
